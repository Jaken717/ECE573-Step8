#! /bin/bash

if [[ "$RISCSIM" = "" ]]; then
    RISCSIM=~/RiscSim/driver.py
fi

RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
RESET="$(tput sgr0)"
BOLD="$(tput bold)"

function status {
    COLOR="$GREEN"
    MESG="PASS"
    if [[ $1 -ne 0 ]]; then
        COLOR="$RED"
        MESG="FAIL"
    fi

    printf '%-28s [%s%s%s]  %s%s%s  %s cycles\n' "$2" "$COLOR" "$MESG" "$RESET" "$BOLD" "$3" "$RESET" "$4"
}

function simulate {
    START_TIME=$(date +%s%N)
    python3 "$RISCSIM" "$1" "$REGS" 2>/dev/null | head -n -1 > "$2"
    END_TIME=$(date +%s%N)
    EXEC_TIME_NS=$((END_TIME - START_TIME)) # Time in nanoseconds
    CLOCK_SPEED_GHZ=2.0 # Set your system's clock speed in GHz
    CYCLES=$(echo "$EXEC_TIME_NS * $CLOCK_SPEED_GHZ / 1000" | bc) # Approximate cycles
    echo "$CYCLES"
}

function randint {
    if [[ "$1" = "" ]]; then
        echo "$((RANDOM % 100))"
    else
        echo "$((RANDOM % $1))"
    fi
}

function randfloat {
    echo "$((RANDOM % 100)).$((RANDOM % 100))"
}

function expected {
    echo "$t" | sed -E 's_tests/(.*)\.uC_outputs/\1\.asm_'
}

printf "%sTest %-23s Status  Input%s\n" "$BOLD" "" "$RESET"
for t in tests/*.uC; do
    ./runme "$t" out "$REGS"
    asm=$(expected "$t")
    case "$(echo "$t" | egrep -o 'test[0-9]+')" in
    "test1")
        num1=$(randint)
        num2=$(randint)
        input="$num1\n$num2\n"
        randin="$num1 $num2"
        ;;
    "test6" | "test7")
        size=$(randint 10)
        input="$size\n"
        randin="$size "
        for i in $(seq 1 1 $size); do
            f=$(randfloat)
            input="${input}$f\n"
            randin="${randin}$f "
        done
        ;;
    *)
        input=""
        randin=""
        ;;
    esac

    echo -e "$input" | simulate "$asm" rstest > rstest_cycles
    CYCLES=$(cat rstest_cycles)
    echo -e "$input" | simulate out rsout > rsout_cycles
    diff rstest rsout > /dev/null
    status $? "$t" "$randin" "$CYCLES"
done

echo "${BOLD}NOTE: tests 1, 6, and 7 take arbitrary input."
echo "This script just picks random numbers.  You should test these"
echo "more yourself!"
echo -n "$RESET"
